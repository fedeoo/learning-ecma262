(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{351:function(e,t,r){"use strict";r.r(t);var a=r(40),n=Object(a.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"最简-js-解释器实现"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#最简-js-解释器实现"}},[e._v("#")]),e._v(" 最简 JS 解释器实现")]),e._v(" "),r("p",[e._v("这个项目的目的只是帮助大家更好的理解 JS。绝大多数的前端工程师希望对 JS 的实现有所了解，即使日常工作中并不一定需要，比较行之有效的办法或许是阅读解释器源码，或者去读 ECMAScript 规范。\n不过这两个都不是一件轻松的事情，况且我们并非对所有内容都有兴趣。事实上，最让人感兴趣的只有几块重要内容：闭包和作用域；this 和原型链；异步编程。这几部分内容在 《You Don't Know JS》一书中都有详细的讲解。\n如果你依然对 JS 的实现兴趣不减的话，不妨跟着这个项目实现部分的特性。好消息是部分特性的实现其实相当简单并且不需要任何编译原理的背景知识。")]),e._v(" "),r("h2",{attrs:{id:"开始之前"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#开始之前"}},[e._v("#")]),e._v(" 开始之前")]),e._v(" "),r("h3",{attrs:{id:"准备工作"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#准备工作"}},[e._v("#")]),e._v(" 准备工作")]),e._v(" "),r("p",[e._v("如果是从头开始实现一个解释器，避免不了从词法分析和语法分析开始。我们对这部分工作没有兴趣，所以直接使用现有的分析器 "),r("a",{attrs:{href:"https://github.com/acornjs/acorn",target:"_blank",rel:"noopener noreferrer"}},[e._v("acorn"),r("OutboundLink")],1),e._v(" 。\n"),r("code",[e._v("acorn")]),e._v(" 是一款比较流行的分析器，"),r("code",[e._v("babel")]),e._v(" 底层依赖的就是 "),r("code",[e._v("acorn")]),e._v("。 另外，"),r("a",{attrs:{href:"https://github.com/jquery/esprima",target:"_blank",rel:"noopener noreferrer"}},[e._v("esprima"),r("OutboundLink")],1),e._v(" 也是一个不错的选择。这儿我们选择 "),r("code",[e._v("acorn")]),e._v("，还有一个经常会用到的在线工具 "),r("a",{attrs:{href:"https://astexplorer.net/",target:"_blank",rel:"noopener noreferrer"}},[e._v("astexplorer"),r("OutboundLink")],1),e._v("。\n"),r("code",[e._v("acorn")]),e._v(" 解析得到的抽象语法树符合 "),r("a",{attrs:{href:"https://github.com/estree/estree",target:"_blank",rel:"noopener noreferrer"}},[e._v("estree"),r("OutboundLink")],1),e._v(" 的规范，项目中也依赖了 @types/estree。")]),e._v(" "),r("p",[e._v("在此之前，希望你大概明白 AST 抽象语法树是怎么回事，知道如何遍历一棵树。")]),e._v(" "),r("h3",{attrs:{id:"开发环境"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#开发环境"}},[e._v("#")]),e._v(" 开发环境")]),e._v(" "),r("p",[e._v("这儿选择 "),r("code",[e._v("Typescript")]),e._v("，在开发中也随时可以查看特定节点的数据类型，代码也比较容易阅读。 测试使用 "),r("code",[e._v("Jest")]),e._v("，运行起来比较简单。即使并不追求 TDD，测试也可以帮助我们持续迭代。建议配置在 IDE 中运行和调试测试。")]),e._v(" "),r("h3",{attrs:{id:"关于实现"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#关于实现"}},[e._v("#")]),e._v(" 关于实现")]),e._v(" "),r("p",[e._v("我们需要尽可能的保持代码简单易懂，这儿只关注最简单的 JS 特性，演示代码的实现与 ECMAScript 规范无关。希望通过这个例子，大家可以对解释器有一个大概的了解，仅此而已。")]),e._v(" "),r("p",[e._v("实现列表")]),e._v(" "),r("ol",[r("li",[r("a",{attrs:{href:"http://https://github.com/fedeoo/learning-ecma262/01%20-%20Scope%20&%20Closure.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("作用域与闭包"),r("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=n.exports}}]);